--!strict
local process = require("@lune/process")
local fs = require("@lune/fs")
local stdio = require("@lune/stdio")
local files = require("./files")

local VERSION = "0.3.0"

-- Process arguments
local inputPath: string?
local useForce = false
for i, arg in process.args do
    if arg == "-o" then
       inputPath = process.args[i + 1]
    elseif arg == "-f" then
        useForce = true
    end
end

if not inputPath then
    warn("No input path passed.")
    return
end

if not fs.isDir(inputPath) then
    warn(`Invalid directory \`{inputPath}\``)
    return
end

inputPath = string.gsub(inputPath, "%s+", "")
if string.sub(inputPath, #inputPath, #inputPath) ~= "/" then
    inputPath = `{inputPath}/`
end

local inputPathBranches = string.split(inputPath, "/")
local inputDirName = inputPathBranches[#inputPathBranches - 1]

local exportFile = `{inputPath}init.luau`
-- assert(fs.isFile(exportFile), `Directory {inputPath} does not have a valid init.luau file.`)

-- Gather type files
local subfiles = files.getSubfiles(inputPath)
local typefiles = {}

for _, file in subfiles do
    local branches = string.split(file, "/")
    local fileName = files.removeExtension(branches[#branches])
    if fileName ~= "init" then
        typefiles[fileName] = file
    end
end

-- Collect types
local types = {}
for fileName, filePath in typefiles do
    local contents = fs.readFile(filePath)
    contents = string.gsub(contents, "%s+", "")
    types[fileName] = {}

    -- With generics
    for typeName in string.gmatch(contents, "exporttype([%a_][%w_]*<[^>]*>)=") do
        table.insert(types[fileName], typeName)
    end

    -- Without generics
    for typeName in string.gmatch(contents, "exporttype([%a_][%w_]*)=") do
        table.insert(types[fileName], typeName)
    end

    table.sort(types[fileName])
end

-- Generate export file
local requires = ""
local exports = ""
for fileName, fileTypes in types do
    local filePath = typefiles[fileName]
    local relativeFilePath = string.gsub(filePath, inputPath, "")
    requires = `{requires}\nlocal {fileName} = require("./{inputDirName}/{files.removeExtension(relativeFilePath)}")`
    exports = `{exports}\n`

    for _, type in fileTypes do
        local typeDef = string.gsub(type, "=.-[,>]", function(sep)
            return string.sub(sep, -1)
        end)

        exports = `{exports}\nexport type {type} = {fileName}.{typeDef}`
    end
end

if not useForce then
    stdio.write("This will ")
    stdio.write(stdio.color("red"))
    stdio.write("overwrite ")
    stdio.write(stdio.color("reset"))
    stdio.write("the file at ")
    stdio.write(stdio.color("red"))
    stdio.write(exportFile .. " ")

    local result = stdio.prompt("confirm", "Proceed")
    if not result then
        print("Operation canceled")
        return
    end
end

local output = `-- Generated by typecollect v{VERSION}{requires}{exports}\n\nreturn \{}`
fs.writeFile(exportFile, output)
print("Generated types file at", exportFile)
