--!strict
local process = require("@lune/process")
local fs = require("@lune/fs")

local VERSION = "0.1.1"

local function getSubfiles(dir: string)
    dir = string.gsub(dir, "%s+", "")
    if string.sub(dir, #dir, #dir) ~= "/" then
        dir = `{dir}/`
    end

    local files = {}
    for _, entry in fs.readDir(dir) do
        local entryPath = `{dir}{entry}`
        if fs.isFile(entryPath) then
            table.insert(files, entryPath)
        else
            for _, file in getSubfiles(entryPath) do
                table.insert(files, file)
            end
        end
    end

    return files
end

local function removeExtension(str: string)
    return string.match(str, "^(.-)%.%w+$")
end

-- Get types directory
local inputPath: string? = process.args[1]
assert(inputPath, "No input path passed. Please run the file with `typecollect path/to/directory`")
assert(fs.isDir(inputPath), `Invalid directory \`{inputPath}\``)

inputPath = string.gsub(inputPath, "%s+", "")
if string.sub(inputPath, #inputPath, #inputPath) ~= "/" then
    inputPath = `{inputPath}/`
end

local inputPathBranches =string.split(inputPath, "/")
local inputDirName = inputPathBranches[#inputPathBranches - 1]

local exportFile = `{inputPath}/init.luau`
-- assert(fs.isFile(exportFile), `Directory {inputPath} does not have a valid init.luau file.`)

-- Gather type files
local subfiles = getSubfiles(inputPath)
local typefiles = {}

for _, file in subfiles do
    local branches = string.split(file, "/")
    local fileName = removeExtension(branches[#branches])
    if fileName ~= "init" then
        typefiles[fileName] = file
    end
end

-- Collect types
local types = {}
for fileName, filePath in typefiles do
    local contents = fs.readFile(filePath)
    contents = string.gsub(contents, "%s+", "")
    types[fileName] = {}

    local matches = string.gmatch(contents, "exporttype([^=]+)=")
    for name in matches do
        table.insert(types[fileName], name)
    end

    table.sort(types[fileName])
end

-- Generate export file
local requires = ""
local exports = ""
for fileName, fileTypes in types do
    local filePath = typefiles[fileName]
    local relativeFilePath = string.gsub(filePath, inputPath, "")
    requires = `{requires}\nlocal {fileName} = require("./{inputDirName}/{removeExtension(relativeFilePath)}")`
    exports = `{exports}\n`

    for _, type in fileTypes do
        exports = `{exports}\nexport type {type} = {fileName}.{type}`
    end
end

local output = `-- Generated by typecollect v{VERSION}{requires}{exports}\n\nreturn \{}`
fs.writeFile(exportFile, output)
